
           ****************************************** Active record validations ******************************************
           
Q. Why use validations ?

--> Validations are used to ensure that only valid data is saved into your database. Model-level validations are the best way to ensure that only valid data is saved into your database.

: Following methods trigger validations and save it to the database if the data is valid
--> create
--> create!
--> update
--> update!
--> save
--> save!

: Following methods skip validations and save the object without checking the validations. These methods should be used carefully.
--> decrement!
--> decrement_counter
--> increment!
--> increment_counter
--> insert
--> insert!
--> insert_all
--> insert_all!
--> toggle!
--> touch
--> touch_all
--> update_all
--> update_attribute
--> update_column
--> update_columns
--> update_counters
--> upsert
--> upsert_all

Note: save method can also skip validations if use like this - save(validate: false)

=> Validations are put in the file [model_name].rb

----------------------------------------------------------------------------------------------------------------------------------

# Some different validations

1. acceptance

--> This validates the checkbox at the user interface to check the box and move further. This is used when user need to agree the terms and condition of filling the form.

Syntax:	class Doctor < ApplicationRecord
	     validates :name, acceptance: true
	end
	
		OR
	
	class Doctor < ApplicationRecord
	     validates :name, acceptance: {message: "Must be checked"}	          :Gives the message when an error occured
	end
	
		OR
	
	class Doctor < ApplicationRecord
	     validates :name, acceptance: {accept: ['True', 'False']}	          :Only True and False values are accepted
	end
	
	
2. validates_associated

--> This is used to take the validations given in another model

Syntax: 	class Library < ApplicationRecord
	  has_many :books
	  validates_associated :books
	end
	
	=> This will take all the validatons given in the books table
	
Note: Don't use validates_associated at both ends. They would call each other to make infinite loops

: Default error message is "is invalid"


3. confirmation

--> This validation is used when we have two text fields and we need same content in both fields. Used for emails and passwords

Syntax: 	class Doctor < ApplicationRecord
	     validates :emails, confirmation: true
	     validates :emails_confirmation, presence: true
	end
	
	Now in the form page we can make a separe text field for email confirmation
	
: Default error message is "doesn't match confirmation"


4. comparison

--> This validation will check a comparison between two comparable values. This validate requires a option to compare.

Syntax:	class Doctor < ApplicationRecord
	     validates :age, comparison {greater_than: 18}
	end
	
Some other options:
--> greater_than
--> greater_than_or_equal_to
--> equal_to
--> less_than
--> less_than_or_equal_to
--> other_than

: Default error message is "must be [option] %{count}"


5. exclusion

--> This validation is used when some data should not be included in the database

Syntax:	 class Doctor < ApplicationRecord
	     validates :place, exclusion: {in: %w(Delhi Palwal)}
	 end
	 
	 --> This will not take the data whose place is Delhi or Palwal
	 
: Some other literals

%w() array of strings
%r() regular expression.
%q() string
%i() array of symbols
%s() symbol

: Default error message is "is reserved"


6. format

--> This validates the values by testing whether they match given regular expression, which is specified using :with option.

Syntax:	class Doctor < ApplicationRecord
	     validates :place, format: {with: /rub[a-z]/}
	end
	
	--> This will check the place condition that it must be starting with rub and then contain any single alphabet
	
: Default error message is "is invalid"


7. inclusion

--> This validation is used when only certain number of values should be stored in database.

Syntax:	class Doctor < ApplicationRecord
	     validates :place, inclusion: {in: %w(Delhi Palwal)}
	end
	
	--> This will take only [Delhi Palwal] values not any other
	
: Default message is "is not inccluded in the list"


8. length

--> This validation deals with the length of the value

Syntax:	class Doctor < ApplicationRecord
	     validates :place, length: {maximum: 20}
	end
	
	--> This will validates the place column that it takes value with maximum length of 20
	
=> Other options are
:minimum
:maximum
:in    -for limit in range    # mostly used in passwords
:is    -for fixed length

=> For error message , we use
:wrong_length
:too_long	- For maximum option
:too_short	- For minimum option
:message


9. 
