
       ********************************************* Acitve record migrations *********************************************
       
Migrations are the convinient way to alter the database over time in a consistent way. All this is to be done in RUBY , we don't have to use SQL language.
To do any change in any column i.e add, remove, datatype, etc. we use migrations
Migration should be logical according to the work we want from that migration file

# Creating a migration file for adding a column		Note: We can migrate migration file only once. After that we have 					      to down the migration file and then migrate again

	$ rails g migration AddEmailToDoctors	
	
	invoke  active_record                                   
	create    db/migrate/20220830104143_add_email_to_doctors.rb

: Now edit this migration file according to your requirements

	class AddEmailToDoctors < ActiveRecord::Migration[7.0]
	  def change
	    add_column :doctors, :emails, :string
	    # add_column :[table_name], :[column_name], :datatype
	  end
	end	
 
: Now to execute this migration file, run
 
 	$ rails db:migrate
 	
 	== 20220830104143 AddEmailToDoctors: migrating ================================
	-- add_column(:doctors, :emails, :string)                     
	   -> 0.0584s                                                 
	== 20220830104143 AddEmailToDoctors: migrated (0.0585s) =======================

	
: Now using reading all data we see that emails column was created and have nil data

> Doctor.all

3.0.0 :001 > Doctor.all
  Doctor Load (0.3ms)  SELECT `doctors`.* FROM `doctors`
 =>                                                           
[#<Doctor:0x00007f11b45cb968                                  
  id: 2,                                                      
  name: "Subhash Atreja",                                     
  mobile: "9864572826",                                       
  address: "SCO-12, Sector - 5, Karnal",                      
  experience: 10,                                             
  created_at: Tue, 30 Aug 2022 09:29:46.453074000 UTC +00:00, 
  updated_at: Tue, 30 Aug 2022 09:29:46.453074000 UTC +00:00, 
  emails: nil>] 
  
  
# Creating a migration file for removing a column

	$ rails g migration RemoveAddressFromDoctors
	
	invoke  active_record                                   
      	create    db/migrate/20220830105238_remove_address_from_doctors.rb

: Now using reading all data we see that address column is deleted

> Doctor.all

3.0.0 :001 > Doctor.all
  Doctor Load (0.5ms)  SELECT `doctors`.* FROM `doctors`
 =>                                                           
[#<Doctor:0x00007f1e8c672d50                                  
  id: 2,                                                      
  name: "Subhash Atreja",                                     
  mobile: "9864572826",                                       
  address: "SCO-12, Sector - 5, Karnal",                      
  experience: 10,                                             
  created_at: Tue, 30 Aug 2022 09:29:46.453074000 UTC +00:00, 
  updated_at: Tue, 30 Aug 2022 09:29:46.453074000 UTC +00:00, 
  emails: nil>]                     
  
  
# To create a foreign key using migration , we will add following in migration file

add_reference :[table_name], :[column_name], foreign_key: true


# To create a join table , we use 

	$ rails g migration CreateJoinTable patient history
	
	--> This will create a file and contains this content
	
	class CreateJoinTable < ActiveRecord::Migration[7.0]
	  def change
	    create_join_table :patients, :histories do |t|
	      # t.index [:patient_id, :history_id]
	      # t.index [:history_id, :patient_id]
	    end
	  end
	end
	
			OR
			
	We can make a migration file then in change method we add this line
	
	create_join_table :patients, :histories do |t|
	end
	
	
----------------------------------------------------------------------------------------------------------------------------------

# Change in a table

--> Just like create_table, change_table is a method used for doing changes in a table

So created a migration file

	$ rails g migration ChangeInPatientTable
      	
      	invoke  active_record
      	create    db/migrate/20220830115811_change_in_patient_table.rb
      	
Now in migration file :

	class ChangeInPatientTable < ActiveRecord::Migration[7.0]
	  def change
	    change_table :patients do |t|
	      t.remove :doctor_id_id
	      t.remove :doctor_id
	      t.rename(:mobile, :phone)
	    end
	  end
	end

This will remove the columns named (doctor_id, doctor_id_id) and rename the column named mobile with phone

----------------------------------------------------------------------------------------------------------------------------------

# Change in a column

--> Just like add_column and remove_column, change_column is a method used to do changes in a particular column

So created a migration file

	$ rails g migration ChangeInPatientTablesColumn
      	
      	invoke  active_record
      	create    db/migrate/20220830115811_change_in_patient_tables_column.rb
      	
Now in migration file :

	class ChangeInPatientTablesColumn < ActiveRecord::Migration[7.0]
	  def change
	    change_column :patients, :address, :string
	  end
	end
	
This will change the datatype of address column from text to string

Note: If we want to add null value constraint in a column and default value constraint, it should be done like this
	change_column_null :[table_name], [column_name], true / false (according to requirement)
	change_column_default :[table_name], [column_name], true / false (according to requirement)
	
: Column modifiers used while creating table and changing the table

--> comment
--> collation
--> default		: default cannot be specified using command line
--> limit
--> null		: null cannot be specified using command line
--> precision
--> scale


Note : In add_column and change_column, there is no option of adding a index. It should be done separately by add_index

----------------------------------------------------------------------------------------------------------------------------------

# Adding a reference of column of one table to another table

--> This will add a new relationship between two tables

So create a new migration file
		
		$ rails g migration AddDoctorReference
		
		In file :
		
		class AddDoctorReference < ActiveRecord::Migration[7.0]
		  def change
		    add_reference :patients, :doctor, index: false
		  end	
		end

		--> This will add a column name doctor_id in patients table 

-------------------------------------------------------------------------------------------------------------------------------		
# Adding a foreign key after referring the column 

So create a new migration file
Note : For adding a foreign key there must be a reference

Syntax: 	add_foreign_key :[table1_name], :[table2_name]

		$ rails g migration AddForeignKey
		
		In file :
		
		class AddForeignKey < ActiveRecord::Migration[7.0]
		  def change
		    add_foreign_key :patients, :doctors	
		  end
		end

=> If we want to add foreign key on other column instead of id column we use column option

Syntax:	add_foreign_key :[table1_name], :[table2_name], column: :[column_of_Table1], primary_key: :[column_of_table2]
