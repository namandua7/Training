
		*********************** Active Record Query Interface ***********************
		
--> In active record , we can find the data using Rails instead of SQL queries. Active record will perform queries on database for you and is compatible with MySQL, MariaDB, PostgreSQL and SQLite.


# Retrieving objects from database

--> To retrieve object, active record provides finder methods.

--> Methods are as follows:

:annotate
:find
:create_with
:distinct
:eager_load
:extending
:extract_associated
:from
:group
:having
:includes
:joins
:left_outer_joins
:limit
:lock
:none
:offset
:optimizer_hints
:order
:preload
:readonly
:references
:reorder
:reselect
:reverse_order
:select
:where


# Retrieving a single object

=> find

--> method will give the result corresponding to the specified primary key that matches any supplied options

3.0.0 :003 > Doctor.find(2)
  Doctor Load (0.8ms)  SELECT `doctors`.* FROM `doctors` WHERE `doctors`.`id` = 2 LIMIT 1
 =>                                                           
#<Doctor:0x0000559fe6491fc0                                   
 id: 2,                                                       
 name: "Subhash Atreja",                                      
 mobile: "9864572826",                                        
 address: "SCO-12, Sector - 5, Karnal",                       
 experience: 10,                                              
 created_at: Tue, 30 Aug 2022 09:29:46.453074000 UTC +00:00,  
 updated_at: Thu, 01 Sep 2022 11:51:19.552535000 UTC +00:00,  
 emails: nil>
 
 Doctor.find([1,5]) - will give the records with ID's from 1 to 5                            
 
 Note : The find method will raise an ActiveRecord::RecordNotFound exception unless a matching record is found for all of the supplied primary keys.
 

=> take

--> retrieve records without any implicit ordering

Doctor.take
  Doctor Load (0.8ms)  SELECT `doctors`.* FROM `doctors` LIMIT 1
 =>                                                           
#<Doctor:0x00007fac80661690                                   
 id: 2,                                                       
 name: "Subhash Atreja",                                      
 mobile: "9864572826",                                        
 address: "SCO-12, Sector - 5, Karnal",                       
 experience: 10,                                              
 created_at: Tue, 30 Aug 2022 09:29:46.453074000 UTC +00:00,  
 updated_at: Thu, 01 Sep 2022 11:51:19.552535000 UTC +00:00,  
 emails: nil>
 
Note: The take method returns nil if no record is found and no exception will be raised.

--> We can also pass arguments in numeric integer, which will give result upto that number of results


=> find_by

--> gives the first record matching the condition

3.0.0 :006 > Doctor.find_by(name: 'Suresh')			# =~ Doctor.where(name: 'Suresh).take
  Doctor Load (0.4ms)  SELECT `doctors`.* FROM `doctors` WHERE `doctors`.`name` = 'Suresh' LIMIT 1
 =>                                                           
#<Doctor:0x00007fac8054c2c8                                   
 id: 3,                                                       
 name: "Suresh",                                              
 mobile: "9876543210",                                        
 address: "Sco - 90,  Sector-10, Faridabad",                  
 experience: 5,                                               
 created_at: Wed, 31 Aug 2022 07:48:32.353049000 UTC +00:00,  
 updated_at: Wed, 31 Aug 2022 07:48:32.353049000 UTC +00:00,  
 emails: nil>                                                
 
----------------------------------------------------------------------------------------------------------------------------------

# Retrieve multiple objects

=> find_each

--> This method retrieves records in batches and then yields each one to the block.

3.0.0 :007 > Doctor.find_each do |doc|
3.0.0 :008 >   puts doc.name
3.0.0 :009 > end
  Doctor Load (0.8ms)  SELECT `doctors`.* FROM `doctors` ORDER BY `doctors`.`id` ASC LIMIT 1000
Subhash Atreja                                                                   
Suresh                                                                           
 => nil  

--> This retrieves customers in batches of 1000 and yields them to the block one by one.

:Options

-- :batch_size = Specify size to give record in batch
-- :start = used from which number of record we have to start
-- :finish = used at which number we have to stop
-- :error_on_ignore = Overrides the application config to specify if an error should be raised when an order is present in the relation.


=> find_in_batches

--> The find_in_batches method is similar to find_each, since both retrieve batches of records. The difference is that find_in_batches yields batches to the block as an array of models, instead of individually. Array Block size is here too 1000


	Doctor.find_in_batches do |doc|
	       doc.each do |d|
	           puts d.name
	       end
	end
	
:Options

-- :batch_size
-- :start
-- :finish
-- :error_on_ignore

----------------------------------------------------------------------------------------------------------------------------------

# Conditions

--> where methods allow you to specify conditions to limit the records returned.

=> Pure string condition

3.0.0 :030 > Doctor.where(name: "Suresh")
  Doctor Load (0.4ms)  SELECT `doctors`.* FROM `doctors` WHERE `doctors`.`name` = 'Suresh'
 =>                                                           
[#<Doctor:0x0000559fe6e954e0                                  
  id: 3,                                                      
  name: "Suresh",                                             
  mobile: "9876543210",                                       
  address: "Sco - 90,  Sector-10, Faridabad",                 
  experience: 5,                                              
  created_at: Wed, 31 Aug 2022 07:48:32.353049000 UTC +00:00, 
  updated_at: Wed, 31 Aug 2022 07:48:32.353049000 UTC +00:00, 
  emails: nil>]   
  

=> Array conditions

If the parameter is varying:

	Book.where("title = ?", params[:title])	# This is recommended
	
		OR
	
	Book.where("title = #{params[:title]}")


If you want to specify multiple conditions 

	Book.where("title = ? AND out_of_print = ?", params[:title], false)


:Place-holder conditions

Book.where("created_at >= :start_date AND created_at <= :end_date",{start_date: params[:start_date], end_date: params[:end_date]})

--> This makes for clearer readability if you have a large number of variable conditions.


=> Hash conditions

--> Active Record also allows you to pass in hash conditions which can increase the readability of your conditions syntax.

:Equality condition

	Book.where(out_of_print: true)

:Range condition

	Book.where(created_at: (Time.now.midnight - 1.day)..Time.now.midnight)

:Subset conditions

	Customer.where(orders_count: [1,3,5])

=> NOT conditions

	Customer.where.not(orders_count: [1,3,5])
	--> This will return the customers whose order count is not 1,3,5
	
=> OR conditions
	
	Customer.where(last_name: 'Smith').or(Customer.where(orders_count: [1,3,5]))

=> AND conditions

	Customer.where(last_name: 'Smith').where(orders_count: [1,3,5]))	# Chaining of where method
	
		OR
	
	Customer.where(id: [1, 2]).and(Customer.where(id: [2, 3]))
	
----------------------------------------------------------------------------------------------------------------------------------

# Ordering

To retrieve data in a specific order from database

	Book.order(:created_at)
	          
	          OR
	          
	Book.order("created_at")
	
: For specifying ASC or DESC

	Book.order(created_at: :desc)
	          
	          OR
	          
	Book.order(created_at: :asc)
	          
	          OR
	          
	Book.order("created_at DESC")
	          
	          OR
	          
	Book.order("created_at ASC")


:Ordering multiple fields

	Book.order(title: :asc, created_at: :desc)
		
		OR
		
	Book.order(:title, created_at: :desc)
		
		OR
		
	Book.order("title ASC, created_at DESC")
		
		OR
		
	Book.order("title ASC", "created_at DESC")

----------------------------------------------------------------------------------------------------------------------------------

# Selecting specific fields

--> By default, Model.find selects all the fields from the result set using select *. To select only a subset of fields from the result set, you can specify the subset via the select method.

	Book.select(:isbn, :out_of_print)
		
		OR
		
	Book.select("isbn, out_of_print")

	--> This will return the record of only two columns
	
: If we want to select distinct record, then you use

	Customer.select(:last_name).distinct

----------------------------------------------------------------------------------------------------------------------------------

# Limit and offset
--> Limit is used to return limited records

	Customer.limit(5)
	--> This will return only 5 records
	
--> Offset is used to skip the records

	Customer.limit(5).offset(30)
	--> This will return the 5 records after skipping 30 records
	
----------------------------------------------------------------------------------------------------------------------------------

# Group

--> To apply a GROUP BY clause to the SQL fired by the finder, you can use the group method.

	Order.select("created_at").group("created_at")
	--> This will select the column created_at and group the distinct dates
	
:Total of grouped items

	Order.group(:status).count
	
----------------------------------------------------------------------------------------------------------------------------------

# Having

--> This method is used when group method is used 
	
	Order.select("created_at, sum(total) as total_price").group("created_at").having("sum(total) > ?", 200)
	
:Passing the above Object to a varibale

              big_orders = Order.select("created_at, sum(total) as total_price").group("created_at").having("sum(total) > ?", 200)
	big_orders[0].total_price
	--> Returns the total price for the first Order object

----------------------------------------------------------------------------------------------------------------------------------

# Overriding conditions

1. unscope
--> You can specify certain conditions to be removed using the unscope method. For example:

	Book.where('id > 100').limit(20).order('id desc').unscope(:order)
	--> This will execute the where and limit method and leave the order method
	
	Book.where(id: 10, out_of_print: false).unscope(where: :id)
	--> This will remove the id condition from the query
	
2. only
--> only is used to specify which methods is to be performed

	Book.where('id > 10').limit(20).order('id desc').only(:order, :where)
	
3. reselect
--> The reselect method overrides an existing select statement.

	Book.select(:title, :isbn).reselect(:created_at)

4. reorder
--> If your association have already specified any ordering way. Then you can use reorder to override it.

For. e.g - Author class includes

	class Author < ApplicationRecord
	  has_many :books, -> { order(year_published: :desc) }
	end
	
           We execute:
                
                Author.find(10).books

	SQL execute :-
		SELECT * FROM authors WHERE id = 10 LIMIT 1
		SELECT * FROM books WHERE author_id = 10 ORDER BY year_published DESC
           We execute:
           
	Author.find(10).books.reorder('year_published ASC')

	SQL execute :-
		SELECT * FROM authors WHERE id = 10 LIMIT 1
		SELECT * FROM books WHERE author_id = 10 ORDER BY year_published ASC
		
5. reverse_order
--> This method reverse the ordering clause if specified

For e.g - 	Book.where("author_id > 10").order(:year_published).reverse_order
	
	SQL execute :-
		SELECT * FROM books WHERE author_id > 10 ORDER BY year_published DESC

: If no ordering clause is present, then this method orders the primary key in reverse order.

	Book.where("author_id > 10").reverse_order

	SQL execute :-
		SELECT * FROM books WHERE author_id > 10 ORDER BY books.id DESC

6. rewhere
--> This method overrides an existing, named where condition.

For e.g -	Book.where(out_of_print: true).rewhere(out_of_print: false)
	
	SQL execute :-
		SELECT * FROM books WHERE `out_of_print` = 0
----------------------------------------------------------------------------------------------------------------------------------

# Null relation

3.0.0 :001 > Doctor.none
 => [] 

--> Returns an empty relation and fires no queries
----------------------------------------------------------------------------------------------------------------------------------

# Readonly objects

--> After defining an object to readonly we cannot modify any attribute to that object.

3.0.0 :003 > doctor = Doctor.readonly.first
  Doctor Load (0.5ms)  SELECT `doctors`.* FROM `doctors` ORDER BY `doctors`.`id` ASC LIMIT 1
 =>                                                                                            
#<Doctor:0x000055d81488de38         
3.0.0 :005 > doctor.name = "Ajay"
 => "Ajay" 
3.0.0 :006 > doctor.save
/home/namandua/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3.1/lib/active_record/persistence.rb:1123:in `_raise_readonly_record_error': Doctor is marked as readonly (ActiveRecord::ReadOnlyRecord)

----------------------------------------------------------------------------------------------------------------------------------

# Locking record for update

--> It is useful when multiple users are working on same database
--> Ensuring atomic updates

This have two locking mechanisms:

1. Optimistic locking

--> This allows multiple users to access the same record for edits, and assumes a minimum of conflicts with the data.
--> It does this by checking whether another process has made changes to a record since it was opened
--> An ActiveRecord::StaleObjectError exception is thrown if that has occurred and the update is ignored.

To run optimistic locking we have to create a column name lock_version using migration

	$ rails g migration AddLockVersionToDoctor lock_version:integer
	
	$ raild db:migrate
	
3.0.0 :012 > d1 = Doctor.find(2)
  Doctor Load (0.4ms)  SELECT `doctors`.* FROM `doctors` WHERE `doctors`.`id` = 2 LIMIT 1
 =>                                                                
#<Doctor:0x00007f9ac47c5ab8                                        
...                                                                
3.0.0 :013 > d2 = Doctor.find(2)
  Doctor Load (0.4ms)  SELECT `doctors`.* FROM `doctors` WHERE `doctors`.`id` = 2 LIMIT 1
 =>                                                                
#<Doctor:0x00005604f9a492d8                                        
...                                                                
3.0.0 :014 > d1.name = "Subhash"
 => "Subhash" 
3.0.0 :015 > d1.save
  TRANSACTION (0.5ms)  BEGIN
  Doctor Update (1.1ms)  UPDATE `doctors` SET `doctors`.`name` = 'Subhash', `doctors`.`updated_at` = '2022-09-08 06:05:55.772756', `doctors`.`lock_version` = 2 WHERE `doctors`.`id` = 2 AND `doctors`.`lock_version` = 1                                                     
  TRANSACTION (43.8ms)  COMMIT                                     
 => true   
                                                              
3.0.0 :017 > d2.name = "Arjun"
 => "Arjun" 
3.0.0 :018 > d2.save
  TRANSACTION (0.5ms)  BEGIN
  Doctor Update (0.8ms)  UPDATE `doctors` SET `doctors`.`name` = 'Arjun', `doctors`.`updated_at` = '2022-09-08 06:06:18.087316', `doctors`.`lock_version` = 2 WHERE `doctors`.`id` = 2 AND `doctors`.`lock_version` = 1                                              
  TRANSACTION (0.5ms)  ROLLBACK                           
/home/namandua/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3.1/lib/active_record/locking/optimistic.rb:108:in `_update_row': Attempted to update a stale object: Doctor. (ActiveRecord::StaleObjectError)



2. Pessimistic locking

--> Pessimistic locking uses a locking mechanism provided by the underlying database.
--> Using lock when building a relation obtains an exclusive lock on the selected rows.    

----------------------------------------------------------------------------------------------------------------------------------

# Joining tables

--> SQL join caluse is same as join method 

=> Using string format

	Doctor.joins("INNER JOIN patients ON patients.doctor_id = doctors.id")
	
	SQL execute :-
		SELECT doctors.* FROM doctors INNER JOIN patients ON patients.doctor_id = doctors.id
		
=> Using Array/Hash format

--> Active Record lets you use the names of the associations defined on the model as a shortcut for specifying JOIN clauses for those associations when using the joins method.

:Joining single association

	Doctor.join(:patients)
	
	SQL execute :-
		SELECT doctors.* FROM doctors INNER JOIN patients ON patients.doctor_id = doctors.id
		
:Joining multiple associations

	Doctor.join(:patients, :histories)
	
	SQL execute :-
		SELECT doctors.* FROM doctors INNER JOIN patients ON patients.doctor_id = doctors.id
			              INNER JOIN histories ON histories.doctor_id = doctors.id
			              
:Joining nested association

	Doctor.join(patients: :histories)
	
	SQL execute :-
		SELECT doctors.* FROM doctors INNER JOIN patients ON patients.doctor_id = doctors.id
			              INNER JOIN histories ON histories.doctor_id = doctors.id
			           
			           
=> Left outer join

--> If you want to select a set of records whether or not they have associated records you can use the left_outer_joins method.

For e.g :-

Customer.left_outer_joins(:reviews).distinct.select('customers.*, COUNT(reviews.*) AS reviews_count').group('customers.id')

	SQL execute :-
		SELECT DISTINCT customers.*, COUNT(reviews.*) AS reviews_count FROM customers
		LEFT OUTER JOIN reviews ON reviews.customer_id = customers.id GROUP BY customers.id
		
----------------------------------------------------------------------------------------------------------------------------------

# Eager loading associations

--> Eager loading is the mechanism for loading the associated records of the objects returned by Model.find using as few queries as possible.

		: N+1 queries problem
		
		books = Book.limit(10)

		books.each do |book|
		  puts book.author.last_name
		end

		--> This code looks fine at the first sight. But the problem lies within the total number of 			    queries executed.
		--> The above code executes 1 (to find 10 books) + 10 (one per each book to load the author) = 11
		    (11 queries in total)
		    
:Solution to N+1 query problem 

--> Active Record lets you specify in advance all the associations that are going to be loaded.

The methods are:

=> includes
=> preload
=> eager_load


1. includes

--> With includes, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.


		books = Book.includes(:author).limit(10)

		books.each do |book|
		  puts book.author.last_name
		end

		-->The above code will execute just 2 queries, as opposed to the 11 queries from the original case

		SELECT `books`.* FROM `books` LIMIT 10
		SELECT `authors`.* FROM `authors`
		      WHERE `authors`.`book_id` IN (1,2,3,4,5,6,7,8,9,10)
		      
:Eager loading with multiple associations

--> Active Record lets you eager load any number of associations with a single Model.find call by using an array, hash, or a nested hash of array/hash with the includes method.

		> Customer.includes(:orders, :reviews)
		
		--> This loads all the customers and the associated orders and reviews for each.
		
	:Nested association hash
	
	> Customer.includes(orders: {books: [:supplier, :author]}).find(1)
	
	--> This will find the customer with id 1 and eager load all of the associated orders for it, the books for all 	    of the orders, and the author and supplier for each of the books.
	

2. preload

--> With preload, Active Record loads each specified association using one query per association.

Note :- When you do "includes" rails automatically decides which strategy to use for you. [Default is 2 Query i.e., Preload in 		itself]

		books = Book.preload(:author).limit(10)

		books.each do |book|
		  puts book.author.last_name
		end
	SQL execute :-
	
		SELECT `books`.* FROM `books` LIMIT 10
			SELECT `authors`.* FROM `authors`
			WHERE `authors`.`book_id` IN (1,2,3,4,5,6,7,8,9,10)

3. eager_load

--> With eager_load, Active Record loads all specified associations using a LEFT OUTER JOIN.

		books = Book.eager_load(:author).limit(10)

		books.each do |book|
		  puts book.author.last_name
		end
	SQL execute :-

		SELECT DISTINCT `books`.`id` FROM `books` LEFT OUTER JOIN `authors` ON `authors`.`book_id` = 			`books`.`id` LIMIT 10
		
		SELECT `books`.`id` AS t0_r0, `books`.`last_name` AS t0_r1, ...
		  FROM `books` LEFT OUTER JOIN `authors` ON `authors`.`book_id` = `books`.`id`
		  WHERE `books`.`id` IN (1,2,3,4,5,6,7,8,9,10)

----------------------------------------------------------------------------------------------------------------------------------

# Scopes

--> Scoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or 		models.
--> With these scopes, you can use every method previously covered such as where, joins and includes.
--> All scope bodies should return an ActiveRecord::Relation or nil to allow for further methods (such as other scopes) to be 		called on it.

--> To define scope we use scope method and pass the query which we want to run while scope is called. Scope is defined in model 	class

For e.g -		class Book < ApplicationRecord
		  scope :out_of_print, -> { where(out_of_print: true) }
		end

	: To call this scope, we use
		
		> Book.out_of_print
		

=> Passing an argument

		class Book < ApplicationRecord
		  scope :costs_more_than, ->(amount) { where("price > ?", amount) }
		end

	: To call this scope, we use
		
		> Book.cost_more_than(110)
		
: Duplicating the functionality of scope by class method

		class Book < ApplicationRecord
		  def self.costs_more_than(amount)
		    where("price > ?", amount)
		  end
		end

		--> This method is accessible on the association of objects
		
		> author = Author.first
		> author.books.costs_more_than(110)
		
=> Using conditional

		class Order < ApplicationRecord
		  scope :created_before, ->(time) { where("created_at < ?", time) if time.present? }
		end

: Like others , this will also behave similarly to class methods

		class Order < ApplicationRecord
		  def self.created_before(time)
		    where("created_at < ?", time) if time.present?
		  end
		end

Note:- A scope will always return an ActiveRecord::Relation object, even if the conditional evaluates to false, whereas a class 	method, will return nil.
       This can cause NoMethodError when chaining class methods with conditionals, if any of the conditionals return false.


=> Applying default scope

--> If we wish for a scope to be applied across all queries to the model we can use the default_scope method within the model itself.

		class Book < ApplicationRecord
		  default_scope { where(out_of_print: false) }
		end

	SQL execute :-
		SELECT * FROM books WHERE (out_of_print = false)

:If we want to add more complex things to default scope, then we define a method in class as default scope

		class Book < ApplicationRecord
		  def self.default_scope
		    # Code
		  end
		end

Note: Default scope is automatically applied while creating a record if the scope arguments are given as hash.
      It is not applied while updating the record.
      
Note: When given in the Array format, default_scope query arguments cannot be converted to a Hash for default attribute assignment.

Note: If we use Model.unscoped.new , then default scope is not applied.


=> Merging of scopes

--> Just like where clauses, scopes are merged using AND conditions in SQL query.

For e.g -		class Book < ApplicationRecord
		  scope :in_print, -> { where(out_of_print: false) }
		  scope :out_of_print, -> { where(out_of_print: true) }
		
		  scope :recent, -> { where('year_published >= ?', Date.current.year - 50 )}
		  scope :old, -> { where('year_published < ?', Date.current.year - 50 )}
		end

		> Book.out_of_print.old
	SQL execute:-
		SELECT books.* FROM books WHERE books.out_of_print = 'true' AND books.year_published < 1969
		
:We can mix and match scope and where condition and the final sql query will execute after applying all condition using AND

		> Book.in_print.where('price < 100')
	SQL execute:-
		SELECT books.* FROM books WHERE books.out_of_print = 'false' AND books.price < 100
		
:If we do want the last where clause to win then merge can be used.

		> Book.in_print.merge(Book.out_of_print)
	SQL execute:-
		SELECT books.* FROM books WHERE books.out_of_print = true
		
=> Removing all scopes

--> If we want to remove any scope for any reason then we can use unscoped method
--> This is useful when default_scope is defined in the model and should not be used for a particular query

		> Book.unscoped.all
	SQL execute:-
		SELECT books.* FROM books
		
		> Book.where(out_of_print: true).unscoped.all
	SQL execute:-
		SELECT books.* FROM books
		
:unscoped can also accept a block

		> Book.unscoped { Book.out_of_print }
	SQL execute:-
		SELECT books.* FROM books WHERE books.out_of_print
		
----------------------------------------------------------------------------------------------------------------------------------
